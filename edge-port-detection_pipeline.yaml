apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: edge-port-detection-apr9
  annotations:
    tekton.dev/output_artifacts: '{"run-a-file": [{"key": "artifacts/$PIPELINERUN/run-a-file/mlpipeline-metrics.tgz",
      "name": "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file/mlpipeline-ui-metadata.tgz", "name": "mlpipeline-ui-metadata",
      "path": "/tmp/mlpipeline-ui-metadata.json"}], "run-a-file-2": [{"key": "artifacts/$PIPELINERUN/run-a-file-2/mlpipeline-metrics.tgz",
      "name": "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-2/mlpipeline-ui-metadata.tgz", "name": "mlpipeline-ui-metadata",
      "path": "/tmp/mlpipeline-ui-metadata.json"}], "run-a-file-3": [{"key": "artifacts/$PIPELINERUN/run-a-file-3/mlpipeline-metrics.tgz",
      "name": "mlpipeline-metrics", "path": "/tmp/mlpipeline-metrics.json"}, {"key":
      "artifacts/$PIPELINERUN/run-a-file-3/mlpipeline-ui-metadata.tgz", "name": "mlpipeline-ui-metadata",
      "path": "/tmp/mlpipeline-ui-metadata.json"}]}'
    tekton.dev/input_artifacts: '{}'
    tekton.dev/artifact_bucket: mlpipeline
    tekton.dev/artifact_endpoint: minio-service.kubeflow:9000
    tekton.dev/artifact_endpoint_scheme: http://
    tekton.dev/artifact_items: '{"run-a-file": [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"],
      ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]], "run-a-file-2":
      [["mlpipeline-metrics", "/tmp/mlpipeline-metrics.json"], ["mlpipeline-ui-metadata",
      "/tmp/mlpipeline-ui-metadata.json"]], "run-a-file-3": [["mlpipeline-metrics",
      "/tmp/mlpipeline-metrics.json"], ["mlpipeline-ui-metadata", "/tmp/mlpipeline-ui-metadata.json"]]}'
    sidecar.istio.io/inject: "false"
    tekton.dev/template: ''
    pipelines.kubeflow.org/big_data_passing_format: $(workspaces.$TASK_NAME.path)/artifacts/$ORIG_PR_NAME/$TASKRUN_NAME/$TASK_PARAM_NAME
    pipelines.kubeflow.org/pipeline_spec: '{"name": "edge-port-detection_apr9"}'
  labels:
    pipelines.kubeflow.org/pipelinename: ''
    pipelines.kubeflow.org/generation: ''
spec:
  pipelineSpec:
    tasks:
    - name: run-a-file
      taskSpec:
        steps:
        - name: main
          args:
          - |
            sh -c "mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir"
            sh -c "echo 'Downloading file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/bootstrapper.py --output bootstrapper.py"
            sh -c "echo 'Downloading file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/requirements-elyra.txt --output requirements-elyra.txt"
            sh -c "python3 -m pip install  packaging && python3 -m pip freeze > requirements-current.txt && python3 bootstrapper.py --pipeline-name 'edge-port-detection_apr9' --cos-endpoint 'https://minio-api-test.apps.cluster-hnrwz.dynamic.redhatworkshops.io' --cos-bucket 'pipeline' --cos-directory 'edge-port-detection_apr9-0410041650' --cos-dependencies-archive 'step1-datacuration-2a9d3630-180f-4bfb-a9bb-8ef0209e4236.tar.gz' --file 'edgedev_port_detection/step1-datacuration.py' "
          command:
          - sh
          - -c
          env:
          - name: ELYRA_RUNTIME_ENV
            value: kfp
          - name: AWS_ACCESS_KEY_ID
            value: minio
          - name: AWS_SECRET_ACCESS_KEY
            value: minio123
          - name: ELYRA_ENABLE_PIPELINE_INFO
            value: "True"
          - name: ELYRA_WRITABLE_CONTAINER_DIR
            value: /tmp
          - name: ELYRA_RUN_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelines.kubeflow.org/run_name']
          image: quay.io/modh/runtime-images@sha256:b0045dc104587a6c6d5689db83c2fd4f4eac5c863969eafd7fae418316b69df1
          imagePullPolicy: IfNotPresent
        stepTemplate:
          volumeMounts:
          - name: mlpipeline-metrics
            mountPath: /tmp
        volumes:
        - name: mlpipeline-metrics
          emptyDir: {}
        metadata:
          labels:
            elyra/node-type: notebook-script
            elyra/pipeline-name: edge-port-detection_apr9
            elyra/pipeline-version: ''
            elyra/experiment-name: ''
            elyra/node-name: step1-datacuration
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            elyra/node-file-name: edgedev_port_detection/step1-datacuration.py
            elyra/pipeline-source: edge-port-detection_apr9.pipeline
            pipelines.kubeflow.org/task_display_name: step1-datacuration
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Run a file",
              "outputs": [], "version": "Run a file@sha256=bb9d5b3cbb2dc2131ea2a6165c3ea3b23e0a983725b0219057f44dfe156e547a"}'
    - name: run-a-file-2
      taskSpec:
        steps:
        - name: main
          args:
          - |
            sh -c "mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir"
            sh -c "echo 'Downloading file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/bootstrapper.py --output bootstrapper.py"
            sh -c "echo 'Downloading file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/requirements-elyra.txt --output requirements-elyra.txt"
            sh -c "python3 -m pip install  packaging && python3 -m pip freeze > requirements-current.txt && python3 bootstrapper.py --pipeline-name 'edge-port-detection_apr9' --cos-endpoint 'https://minio-api-test.apps.cluster-hnrwz.dynamic.redhatworkshops.io' --cos-bucket 'pipeline' --cos-directory 'edge-port-detection_apr9-0410041650' --cos-dependencies-archive 'step2-training-d5522513-d08f-42d3-aa43-e42205387907.tar.gz' --file 'edgedev_port_detection/step2-training.py' --outputs 'dataset/homerouter/v2.pth;dataset/homerouter/result.json;dataset/homerouter/images/fd3074c7-IMG_4844.jpg' "
          command:
          - sh
          - -c
          env:
          - name: ELYRA_RUNTIME_ENV
            value: kfp
          - name: AWS_ACCESS_KEY_ID
            value: minio
          - name: AWS_SECRET_ACCESS_KEY
            value: minio123
          - name: ELYRA_ENABLE_PIPELINE_INFO
            value: "True"
          - name: ELYRA_WRITABLE_CONTAINER_DIR
            value: /tmp
          - name: ELYRA_RUN_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelines.kubeflow.org/run_name']
          image: quay.io/modh/runtime-images@sha256:b0045dc104587a6c6d5689db83c2fd4f4eac5c863969eafd7fae418316b69df1
          imagePullPolicy: IfNotPresent
        stepTemplate:
          volumeMounts:
          - name: mlpipeline-metrics
            mountPath: /tmp
        volumes:
        - name: mlpipeline-metrics
          emptyDir: {}
        metadata:
          labels:
            elyra/node-type: notebook-script
            elyra/pipeline-name: edge-port-detection_apr9
            elyra/pipeline-version: ''
            elyra/experiment-name: ''
            elyra/node-name: step2-training
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            elyra/node-file-name: edgedev_port_detection/step2-training.py
            elyra/pipeline-source: edge-port-detection_apr9.pipeline
            pipelines.kubeflow.org/task_display_name: step2-training
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Run a file",
              "outputs": [], "version": "Run a file@sha256=25547eca4ff9c5c3828361aca836c79b15d21d8d692c47f15d4ccd441a697a77"}'
      runAfter:
      - run-a-file
    - name: run-a-file-3
      taskSpec:
        steps:
        - name: main
          args:
          - |
            sh -c "mkdir -p ./jupyter-work-dir && cd ./jupyter-work-dir"
            sh -c "echo 'Downloading file:///opt/app-root/bin/utils/bootstrapper.py' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/bootstrapper.py --output bootstrapper.py"
            sh -c "echo 'Downloading file:///opt/app-root/bin/utils/requirements-elyra.txt' && curl --fail -H 'Cache-Control: no-cache' -L file:///opt/app-root/bin/utils/requirements-elyra.txt --output requirements-elyra.txt"
            sh -c "python3 -m pip install  packaging && python3 -m pip freeze > requirements-current.txt && python3 bootstrapper.py --pipeline-name 'edge-port-detection_apr9' --cos-endpoint 'https://minio-api-test.apps.cluster-hnrwz.dynamic.redhatworkshops.io' --cos-bucket 'pipeline' --cos-directory 'edge-port-detection_apr9-0410041650' --cos-dependencies-archive 'step3-validation_inference-599e80ee-7f1f-40b2-81cd-dd93460a37aa.tar.gz' --file 'edgedev_port_detection/step3-validation_inference.py' --inputs 'dataset/homerouter/result.json;dataset/homerouter/v2.pth;dataset/homerouter/images/fd3074c7-IMG_4844.jpg' --outputs 'dataset/homerouter/model_v1.onnx' "
          command:
          - sh
          - -c
          env:
          - name: ELYRA_RUNTIME_ENV
            value: kfp
          - name: AWS_ACCESS_KEY_ID
            value: minio
          - name: AWS_SECRET_ACCESS_KEY
            value: minio123
          - name: ELYRA_ENABLE_PIPELINE_INFO
            value: "True"
          - name: ELYRA_WRITABLE_CONTAINER_DIR
            value: /tmp
          - name: ELYRA_RUN_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['pipelines.kubeflow.org/run_name']
          image: quay.io/modh/runtime-images@sha256:b0045dc104587a6c6d5689db83c2fd4f4eac5c863969eafd7fae418316b69df1
          imagePullPolicy: IfNotPresent
        stepTemplate:
          volumeMounts:
          - name: mlpipeline-metrics
            mountPath: /tmp
        volumes:
        - name: mlpipeline-metrics
          emptyDir: {}
        metadata:
          labels:
            elyra/node-type: notebook-script
            elyra/pipeline-name: edge-port-detection_apr9
            elyra/pipeline-version: ''
            elyra/experiment-name: ''
            elyra/node-name: step3-validation_inference
            pipelines.kubeflow.org/cache_enabled: "true"
          annotations:
            elyra/node-file-name: edgedev_port_detection/step3-validation_inference.py
            elyra/pipeline-source: edge-port-detection_apr9.pipeline
            pipelines.kubeflow.org/task_display_name: step3-validation_inference
            pipelines.kubeflow.org/component_spec_digest: '{"name": "Run a file",
              "outputs": [], "version": "Run a file@sha256=d587328a35f66178151e1546d6c3b2edc9b4b7f00bdfb08971485c19db489507"}'
      runAfter:
      - run-a-file-2
